/// ----------------------------------------------------------------------

/// Padding height 

/// ----------------------------------------------------------------------

///
/// Set an element's height using padding instead of fixed height. Also converts px to rem.
/// For example, to make a button with height of 30px:
///
/// @example scss
/// .button {
///   padding: height-to-pad(30px);
/// }
///
/// Also supports offsets using a mixin, so to generate a button with height of 30px but align text 75% towards the bottom:
///
/// @example scss
/// .button {
///   @include height-to-pad(30px, .75);
/// }
///
/// @param {Number} $x
/// The height in px
///
/// @param {Number} $font-size
/// The font-size of the element defaults to base font size
///
/// @param {Number} $offset-y
/// The vertical positioning of the text - a number from 0 to 1
///
/// @return {Number||Object}
/// Either a value in REMs (using px to rem)
///
@function height-to-pad($x, $font-size, $offset-y: .5) {

  $font-size: if($font-size, $font-size, 1rem);
  $font-size: if(str-index($string: #{$font-size}, $substring: 'px'), rem($font-size), $font-size);
  $x: if(str-index($string: #{$x}, $substring: 'px'), rem($x), $x);

  $z: $font-size;
  $y1: ($x - $z) * $offset-y;
  $y2: ($x - $z) * (1 - $offset-y);
  

  @if ($y1 == $y2) {
    @return $y1;
  }
  @else {
    $values: ('top': $y1, 'bottom': $y2, 'font-size': $font-size);
    @return $values;
  }
}
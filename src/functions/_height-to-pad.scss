/// ----------------------------------------------------------------------

/// Padding height 

/// ----------------------------------------------------------------------

// Change values to REM if provided in PX
@function fixUnit($in, $out) {
  $fixed: if(str-index($string: #{$in}, $substring: 'px'), rem($in), $in);
  @return $fixed;
};

///
/// Set an element's height using padding instead of fixed height. Also converts px to rem.
/// For example, to make a button with height of 30px:
///
/// @example scss
/// .button {
///   padding: height-to-pad(30px);
/// }
///
/// Also supports offsets using a mixin, so to generate a button with height of 30px but align text 75% towards the bottom:
///
/// @example scss
/// .button {
///   @include height-to-pad(30px, .75);
/// }
///
/// @param {Number} $x
/// The height in px
///
/// @param {Number} $border-width
/// The border width, if any
///
/// @param {Number} $line-height
/// The line-height of the element defaults to base font size
///
/// @param {Number} $offset-y
/// The vertical positioning of the text - a number from 0 to 1
///
/// @return {Object}
/// Either a value in REMs (using px to rem)
///
@function height-to-pad($x, $border-width: 0, $line-height: 1, $offset-y: .5) {
  $x: rem($x);
  $border-width: rem($border-width);
  $line-height: rem($line-height);
  
  $total-pad: $x - ($border-width * 2);

  $y1: ($total-pad / 2) - ($line-height * $offset-y);
  $y2: ($total-pad / 2) - ($line-height * (1 - $offset-y));

  $values: ('top': $y1, 'bottom': $y2);

  @return $values;
}